generator client {
  provider      = "prisma-client-js"
  // Include targets needed for local dev (native) and Alpine runtime using OpenSSL 3
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Ping {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  @@map("_Ping")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String
  role          Role           @default(GTC_POINT)
  sectorId      String? // for SECTOR_OWNER
  gtcPointId    String? // for GTC_POINT
  sector        Sector?        @relation("SectorUsers", fields: [sectorId], references: [id])
  gtcPoint      GtcPoint?      @relation("PointUsers", fields: [gtcPointId], references: [id])
  userSectors   UserSector[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  uploadedConventionDocuments ConventionDocument[] @relation("UserUploadedConventionDocuments")
  approvedPointOnboardings     PointOnboarding[]     @relation("UserApprovedPointOnboardings")
}

enum Role {
  ADMIN
  SECTOR_OWNER
  GTC_POINT
  EXTERNAL
}

model Sector {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  points    GtcPoint[]

  // Optional: sector owners (Users with sectorId referencing this)
  users       User[]       @relation("SectorUsers")
  userSectors UserSector[]
  conventions Convention[]
  leads       Lead[]
  pointOnboardings PointOnboarding[]
  services   Service[]
}

// Join table to allow many-to-many relationship between Users and Sectors
model UserSector {
  id        String   @id @default(cuid())
  userId    String
  sectorId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  sector Sector @relation(fields: [sectorId], references: [id])

  @@unique([userId, sectorId])
  @@index([sectorId])
}

model GtcPoint {
  id          String            @id @default(cuid())
  name        String
  email       String            @unique
  sectorId    String
  sector      Sector            @relation(fields: [sectorId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  services    GtcPointService[]
  users       User[]            @relation("PointUsers")
  conventions Convention[]
  onboardings PointOnboarding[]
}

model Service {
  id         String            @id @default(cuid())
  code       String
  name       String
  active     Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  sectorId   String
  sector     Sector            @relation(fields: [sectorId], references: [id])
  pointLinks GtcPointService[]
  onboardingLinks PointOnboardingService[]

  @@index([sectorId])
  @@unique([sectorId, code])
}

model GtcPointService {
  id         String        @id @default(cuid())
  gtcPointId String
  serviceId  String
  status     ServiceStatus @default(ENABLED)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  gtcPoint GtcPoint @relation(fields: [gtcPointId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])

  @@unique([gtcPointId, serviceId])
}

enum ServiceStatus {
  ENABLED
  DISABLED
  PENDING_REQUEST
}

enum NotificationType {
  LEAD_NEW
  CONVENTION_UPLOADED
  CONVENTION_STATUS
  SERVICE_REQUEST
  SERVICE_STATUS
  GENERIC
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType @default(GENERIC)
  subject     String          @db.VarChar(255)
  contentHtml String?         @db.Text 
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read, createdAt])
}

enum ConventionStatus {
  NEW
  UPLOADED
  APPROVED
  DECLINED
}

enum ConventionDocKind {
  PREFILL
  SIGNED
  OTHER
}

enum PointOnboardingStatus {
  DRAFT
  SUBMITTED
  APPROVED
  DECLINED
  COMPLETED
}

model Convention {
  id               String           @id @default(cuid())
  gtcPointId       String
  sectorId         String
  status           ConventionStatus @default(NEW)
  internalSalesRep String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  gtcPoint  GtcPoint             @relation(fields: [gtcPointId], references: [id])
  sector    Sector               @relation(fields: [sectorId], references: [id])
  documents ConventionDocument[]

  @@index([gtcPointId, status, createdAt])
}

model ConventionDocument {
  id           String            @id @default(cuid())
  conventionId String
  kind         ConventionDocKind @default(SIGNED)
  fileName     String
  path         String
  mime         String
  size         Int
  checksum     String
  uploadedById String?
  createdAt    DateTime          @default(now())

  convention Convention @relation(fields: [conventionId], references: [id])
  uploadedBy User?      @relation("UserUploadedConventionDocuments", fields: [uploadedById], references: [id])

  @@index([conventionId, createdAt])
}

model PointOnboarding {
  id                 String                 @id @default(cuid())
  sectorId           String
  email              String
  name               String
  vatOrTaxNumber     String?
  phone              String?
  signaturePath      String?
  signatureUploadthingKey String?  // UploadThing key for signature file
  includeServices    Boolean                @default(false)
  status             PointOnboardingStatus  @default(DRAFT)

  onboardingToken    String                 @unique
  registrationToken  String?                @unique
  tokenExpiresAt     DateTime?

  gtcPointId         String?
  approvedByUserId   String?
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  submittedAt        DateTime?
  approvedAt         DateTime?
  completedAt        DateTime?

  sector             Sector                 @relation(fields: [sectorId], references: [id])
  approvedBy         User?                  @relation("UserApprovedPointOnboardings", fields: [approvedByUserId], references: [id])
  gtcPoint           GtcPoint?              @relation(fields: [gtcPointId], references: [id])
  services           PointOnboardingService[]

  @@index([sectorId, status, createdAt])
}

model PointOnboardingService {
  id                 String          @id @default(cuid())
  onboardingId       String
  serviceId          String
  createdAt          DateTime        @default(now())

  onboarding         PointOnboarding @relation(fields: [onboardingId], references: [id])
  service            Service         @relation(fields: [serviceId], references: [id])

  @@unique([onboardingId, serviceId])
}

model Lead {
  id        String   @id @default(cuid())
  sectorId  String
  name      String
  email     String?
  phone     String?
  message   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sector      Sector           @relation(fields: [sectorId], references: [id])
  attachments LeadAttachment[]

  @@index([sectorId, createdAt])
}

model LeadAttachment {
  id            String   @id @default(cuid())
  leadId        String
  fileName      String
  path          String
  mime          String
  size          Int
  checksum      String
  uploadthingKey String?  // UploadThing file key for deletion
  createdAt     DateTime @default(now())

  lead Lead @relation(fields: [leadId], references: [id])

  @@index([leadId, createdAt])
}
