generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Ping {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  @@map("_Ping")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  name          String
  role          Role           @default(GTC_POINT)
  sectorId      String? // for SECTOR_OWNER
  gtcPointId    String? // for GTC_POINT
  sector        Sector?        @relation("SectorUsers", fields: [sectorId], references: [id])
  gtcPoint      GtcPoint?      @relation("PointUsers", fields: [gtcPointId], references: [id])
  notifications Notification[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  uploadedConventionDocuments ConventionDocument[] @relation("UserUploadedConventionDocuments")
}

enum Role {
  ADMIN
  SECTOR_OWNER
  GTC_POINT
  EXTERNAL
}

model Sector {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  points    GtcPoint[]

  // Optional: sector owners (Users with sectorId referencing this)
  users       User[]       @relation("SectorUsers")
  conventions Convention[]
}

model GtcPoint {
  id          String            @id @default(cuid())
  name        String
  email       String            @unique
  sectorId    String
  sector      Sector            @relation(fields: [sectorId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  services    GtcPointService[]
  users       User[]            @relation("PointUsers")
  conventions Convention[]
}

model Service {
  id         String            @id @default(cuid())
  code       String            @unique
  name       String
  active     Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  pointLinks GtcPointService[]
}

model GtcPointService {
  id         String        @id @default(cuid())
  gtcPointId String
  serviceId  String
  status     ServiceStatus @default(ENABLED)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  gtcPoint GtcPoint @relation(fields: [gtcPointId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])

  @@unique([gtcPointId, serviceId])
}

enum ServiceStatus {
  ENABLED
  DISABLED
  PENDING_REQUEST
}

enum NotificationType {
  LEAD_NEW
  CONVENTION_UPLOADED
  CONVENTION_STATUS
  SERVICE_REQUEST
  SERVICE_STATUS
  GENERIC
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType @default(GENERIC)
  subject     String
  contentHtml String?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, read, createdAt])
}

enum ConventionStatus {
  NEW
  UPLOADED
  APPROVED
  DECLINED
}

enum ConventionDocKind {
  PREFILL
  SIGNED
  OTHER
}

model Convention {
  id               String           @id @default(cuid())
  gtcPointId       String
  sectorId         String
  status           ConventionStatus @default(NEW)
  internalSalesRep String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  gtcPoint  GtcPoint             @relation(fields: [gtcPointId], references: [id])
  sector    Sector               @relation(fields: [sectorId], references: [id])
  documents ConventionDocument[]

  @@index([gtcPointId, status, createdAt])
}

model ConventionDocument {
  id           String            @id @default(cuid())
  conventionId String
  kind         ConventionDocKind @default(SIGNED)
  fileName     String
  path         String
  mime         String
  size         Int
  checksum     String
  uploadedById String?
  createdAt    DateTime          @default(now())

  convention Convention @relation(fields: [conventionId], references: [id])
  uploadedBy User?      @relation("UserUploadedConventionDocuments", fields: [uploadedById], references: [id])

  @@index([conventionId, createdAt])
}
